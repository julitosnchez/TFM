<?xml version="1.0"?>
<launch>    
    <!-- Launches the nodes -->

  <!-- WORLD TO CAMERA  -->
  <node pkg="tf" type="static_transform_publisher" name="world2camera" args="0.0 0.0 0.48 0.34841337  0.34813603 -0.61514481  0.61563486 /base_link /camera_link 200"/>
   
 	<!-- SET CAMERA FRAMES -->
<!-- 
    1) transform 2) timestamp 3) the name of the parent frame 4) the name of the child frame -->
<!-- sendTransform(tf::StampedTransform(transform_1, ros::Time::now(), "/camera_link", "/camera_rgb_frame")); -->
<!-- transform_1.setOrigin(tf::Vector3(0.0, -0.045, 0.0) );   q.setRPY(0, 0, 0);
   <node pkg="tf" type="static_transform_publisher" name="camera2frame" args="0.0 -0.045 0.0 0.0 0.0 0.0 1.0 /camera_link /camera_rgb_frame 100"/>
   <node pkg="tf" type="static_transform_publisher" name="frame2optical" args="0.0 0.0 0.0 -0.5 0.5 -0.5 0.5 /camera_rgb_frame /camera_rgb_optical_frame 100"/> 
-->
 
    <!-- Combino el tf dado a la kinect en URDF con el de Nadia -->
    <node pkg="tf" type="static_transform_publisher" name="tranform" args="0.16 0.0 1.22 -1.57 0 -2.1 base_link camera_link 100" />

    <!--Convert a PCD file to ROS PointCloud msg-->
    <node pkg="pcl_ros" type="pcd_to_pointcloud" name="pcd_to_ros" output="screen" args ="$(find pcl_ros_pkg)/pcd/test_pcd.pcd 1">
    	<param name="frame_id" value="camera_link" />
   	 <remap from="cloud_in" to="cloud_pcd" />
    </node>

    <!--Filtering and clustering points in the PointCloud -->
    <node name="colored_cloud_filter" pkg="pcl_ros_pkg" type="colored_cluster"/> 
    <!--node name="colored_cloud_filter" pkg="pcl_ros_pkg" type="colored_cluster" output="screen"/--> 

    <!-- Generate an Octomap from Point Cloud -->
    <node name="octomap_server" pkg="octomap_server" type="octomap_server_node"> 
		<param name="resolution" value="0.01" />
		<param name="frame_id" type="string" value="base_link" />
		<remap from="cloud_in" to="output"/>
    </node>

</launch>
